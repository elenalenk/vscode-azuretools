steps:
  - task: Npm@1
    displayName: "\U0001F449 Package"
    inputs:
      command: custom
      customCommand: run package
      workingDir: $(working_directory)
    condition: succeeded()

  # - pwsh: | 
  #     Write-Output "##vso[task.setvariable variable=name;isOutput=true]$((Get-Content -Raw -Path package.json | ConvertFrom-Json).name)"
  #     Write-Output "##vso[task.setvariable variable=version;isOutput=true]$((Get-Content -Raw -Path package.json | ConvertFrom-Json).version)"
  #   name: package
  #   displayName: "\U0001F449 Get extension info from package.json"

  # - script: npx @vscode/vsce@latest generate-manifest -i $(package.name)-$(package.version).vsix -o $(Build.SourcesDirectory)/extension.manifest
  #   displayName: "\U0001F449 Generate extension manifest"

  # - script: copy $(Build.SourcesDirectory)\extension.manifest $(Build.SourcesDirectory)\extension.signature.p7s
  #   displayName: "\U0001F449 Prepare manifest for signing"

  # - task: DotNetCoreCLI@2
  #   displayName: Sign with MSBuild
  #   inputs:
  #     command: 'build'
  #     projects: 'SignExtension.signproj'

  # - script: node $(Build.SourcesDirectory)/build/sign.js
  #   displayName: "\U0001F449 Sign extension manifest"

  # - task: CopyFiles@2
  #   displayName: "\U0001F449 Copy packages and vsix to staging directory"
  #   inputs:
  #     # Uploading the package.json so we can publish later without cloning the source
  #     # Files related to signing:
  #     #   extension.manifest is the signature file
  #     #   extension.signature.p7s is the extension manifest generated by vsce
  #     Contents: |
  #       **/*.vsix
  #       package.json
  #       extension.manifest
  #       extension.signature.p7s
  #       **/*.tar.gz
  #       **/*.tgz
  #     TargetFolder: "$(build.artifactstagingdirectory)/build/$(artifact_name)"
  #   condition: and(succeeded(), ne(variables['System.PullRequest.IsFork'], 'True'))