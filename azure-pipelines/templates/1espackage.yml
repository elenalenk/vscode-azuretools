steps:
  - task: Npm@1
    displayName: "\U0001F449 Package"
    inputs:
      command: custom
      customCommand: run package
      workingDir: $(working_directory)
    condition: succeeded()

    # get version from package json and store it in a variable to use later
  - script: echo "##vso[task.setvariable variable=version;]$(node -p \"require('./package.json').version\")"
    displayName: 'Set version variable'

  - script: npx @vscode/vsce@latest generate-manifest -i $(Build.Repository.Name)-$(version).vsix -o $(Build.SourcesDirectory)/extension.manifest
    displayName: 'Generate extension manifest'

  - script: copy $(Build.SourcesDirectory)\extension.manifest $(Build.SourcesDirectory)\extension.signature.p7s
    displayName: 'Prepare manifest for signing'

  - script: node $(Build.SourcesDirectory)/build/sign.js
    displayName: 'Sign extension manifest'

  - task: CopyFiles@2
    displayName: "\U0001F449 Copy packages and vsix to staging directory"
    inputs:
      Contents: |
        **/*.vsix
        **/*.manifest
        **/*.p7s
        **/*.tar.gz
        **/*.tgz
      TargetFolder: "$(build.artifactstagingdirectory)/build/$(artifact_name)"
    condition: and(succeeded(), ne(variables['System.PullRequest.IsFork'], 'True'))
